{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n// Define the initial state using that type\n\nconst initialState = {\n  id: 0,\n  email: \"\",\n  phoneNumber: \"\",\n  fullName: \"\",\n  avatar: \"\",\n  gender: \"\",\n  dateOfBirth: new Date('2000-01-01'),\n  address: \"\",\n  role: \"\",\n  status: false\n};\nexport const userSlice = createSlice({\n  name: 'user',\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState,\n  reducers: {\n    setUser: (state, action) => {\n      state.id = action.payload.id;\n      state.fullName = action.payload.fullName;\n      state.phoneNumber = action.payload.phoneNumber;\n      state.email = action.payload.email;\n      state.role = action.payload.role;\n      state.dateOfBirth = action.payload.dateOfBirth;\n      state.address = action.payload.address;\n    },\n    updateProfile: (state, action) => {\n      state.fullName = action.payload.name;\n      state.avatar = action.payload.avatar;\n      state.address = action.payload.address;\n      state.phoneNumber = action.payload.phone;\n      state.dateOfBirth = action.payload.dateOfBirth;\n    },\n    clearUser: () => initialState\n  }\n});\nexport const {\n  setUser,\n  updateProfile,\n  clearUser\n} = userSlice.actions;\nexport const selectUser = state => state.user;\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","id","email","phoneNumber","fullName","avatar","gender","dateOfBirth","Date","address","role","status","userSlice","name","reducers","setUser","state","action","payload","updateProfile","phone","clearUser","actions","selectUser","user","reducer"],"sources":["E:/DACNPM/21.5.2025/CK_CNPM_DoctorBooking_FE/src/Redux/Slice/UserSlice.ts"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\ninterface User {\r\n    id: number;\r\n    email: string; // Sửa từ String thành string\r\n    phoneNumber?: string; // Sửa từ String thành string\r\n    fullName?: string; // Sửa từ String thành string\r\n    avatar?: string; // Sửa từ String thành string\r\n    gender?: string; // Sửa từ String thành string\r\n    dateOfBirth: Date; // Không cần optional vì có giá trị mặc định\r\n    address?: string; // Sửa từ String thành string\r\n    role?: string; // Sửa từ String thành string\r\n    status: boolean;\r\n}\r\n// Define the initial state using that type\r\n\r\nconst initialState: User =  {\r\n    id: 0,\r\n    email: \"\",\r\n    phoneNumber: \"\",\r\n    fullName: \"\",\r\n    avatar: \"\",\r\n    gender: \"\",\r\n    dateOfBirth: new Date('2000-01-01'),\r\n    address: \"\",\r\n    role: \"\",\r\n    status:false\r\n}\r\n\r\nexport const userSlice = createSlice({\r\n    name: 'user',\r\n    // `createSlice` will infer the state type from the `initialState` argument\r\n    initialState,\r\n    reducers: {\r\n        setUser: (state, action) => {\r\n            state.id = action.payload.id;\r\n            state.fullName = action.payload.fullName ;\r\n            state.phoneNumber = action.payload.phoneNumber ;\r\n            state.email = action.payload.email;\r\n            state.role = action.payload.role;\r\n            state.dateOfBirth = action.payload.dateOfBirth;\r\n            state.address = action.payload.address;\r\n        },\r\n        updateProfile: (state, action) => {\r\n            state.fullName = action.payload.name ;\r\n            state.avatar = action.payload.avatar\r\n            state.address = action.payload.address;\r\n            state.phoneNumber = action.payload.phone;\r\n            state.dateOfBirth = action.payload.dateOfBirth;\r\n        },\r\n        clearUser:() => initialState,\r\n    },\r\n})\r\n\r\nexport const {setUser, updateProfile, clearUser} = userSlice.actions\r\nexport const selectUser = (state: { user: User }) => state.user;\r\nexport default userSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAc9C;;AAEA,MAAMC,YAAkB,GAAI;EACxBC,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,EAAE;EACTC,WAAW,EAAE,EAAE;EACfC,QAAQ,EAAE,EAAE;EACZC,MAAM,EAAE,EAAE;EACVC,MAAM,EAAE,EAAE;EACVC,WAAW,EAAE,IAAIC,IAAI,CAAC,YAAY,CAAC;EACnCC,OAAO,EAAE,EAAE;EACXC,IAAI,EAAE,EAAE;EACRC,MAAM,EAAC;AACX,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGb,WAAW,CAAC;EACjCc,IAAI,EAAE,MAAM;EACZ;EACAb,YAAY;EACZc,QAAQ,EAAE;IACNC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACxBD,KAAK,CAACf,EAAE,GAAGgB,MAAM,CAACC,OAAO,CAACjB,EAAE;MAC5Be,KAAK,CAACZ,QAAQ,GAAGa,MAAM,CAACC,OAAO,CAACd,QAAQ;MACxCY,KAAK,CAACb,WAAW,GAAGc,MAAM,CAACC,OAAO,CAACf,WAAW;MAC9Ca,KAAK,CAACd,KAAK,GAAGe,MAAM,CAACC,OAAO,CAAChB,KAAK;MAClCc,KAAK,CAACN,IAAI,GAAGO,MAAM,CAACC,OAAO,CAACR,IAAI;MAChCM,KAAK,CAACT,WAAW,GAAGU,MAAM,CAACC,OAAO,CAACX,WAAW;MAC9CS,KAAK,CAACP,OAAO,GAAGQ,MAAM,CAACC,OAAO,CAACT,OAAO;IAC1C,CAAC;IACDU,aAAa,EAAEA,CAACH,KAAK,EAAEC,MAAM,KAAK;MAC9BD,KAAK,CAACZ,QAAQ,GAAGa,MAAM,CAACC,OAAO,CAACL,IAAI;MACpCG,KAAK,CAACX,MAAM,GAAGY,MAAM,CAACC,OAAO,CAACb,MAAM;MACpCW,KAAK,CAACP,OAAO,GAAGQ,MAAM,CAACC,OAAO,CAACT,OAAO;MACtCO,KAAK,CAACb,WAAW,GAAGc,MAAM,CAACC,OAAO,CAACE,KAAK;MACxCJ,KAAK,CAACT,WAAW,GAAGU,MAAM,CAACC,OAAO,CAACX,WAAW;IAClD,CAAC;IACDc,SAAS,EAACA,CAAA,KAAMrB;EACpB;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAACe,OAAO;EAAEI,aAAa;EAAEE;AAAS,CAAC,GAAGT,SAAS,CAACU,OAAO;AACpE,OAAO,MAAMC,UAAU,GAAIP,KAAqB,IAAKA,KAAK,CAACQ,IAAI;AAC/D,eAAeZ,SAAS,CAACa,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}